version: '3'

services:
  frontend:
    build: './frontend'
    command: serve -s build -l 3000
    ports:
      - '3000:3000'
    restart: unless-stopped

  api:
    build: './api'
    command: npm run start
    restart: unless-stopped # перезапускать контейнер после того как упадет
    ports:
      - '3001:3001'
    environment:
      PORT: 3001
      MONGO_URL: mongodb://api_db_mongo:27017/api
    depends_on: #сервисы которые необходимо запустить раньше текущего
      - api_db_mongo

  auth:
    build: './auth'
    command: npm run start
    restart: unless-stopped # перезапускать контейнер после того как упадет
    ports:
      - '3002:3002'
    environment:
      PORT: 3002
      POSTGRES_HOST: '127.0.0.1'
      POSTGRES_USER: postgres
      POSTGRES_DB: docker_test
      POSTGRES_PASSWORD: root
      POSTGRES_PORT: 5432
    depends_on: #сервисы которые необходимо запустить раньше текущего
      - api_db_pg

  api_db_mongo:
    image: mongo:latest
    volumes:
      - mongo_db:/data/db

  api_db_pg:
    image: postgres:12
    restart: always
    environment:
      POSTGRES_HOST: '127.0.0.1'
      POSTGRES_USER: postgres
      POSTGRES_DB: docker_test
      POSTGRES_PASSWORD: root
      POSTGRES_PORT: 5432
    volumes:
      - pgdata:/var/lib/postgresql/db

  nginx:
    image: nginx:stable-alpine
    ports:
      - '80:80'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/nginx.conf
    depends_on:
      - frontend

volumes:
  mongo_db:
  pgdata:
